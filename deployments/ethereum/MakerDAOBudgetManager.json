{
  "address": "0x37b375e3D418fbECba6b283e704F840AB32f3b3C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IncorrectVestId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinBuffer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyKeeper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMaker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPendingGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minBuffer",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxBuffer",
          "type": "uint256"
        }
      ],
      "name": "BufferSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_claimed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_refilled",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_returned",
          "type": "uint256"
        }
      ],
      "name": "ClaimedDai",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "DeletedInvoice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "DustSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_gasCostETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_claimableDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "InvoicedGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_keep3r",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_job",
          "type": "address"
        }
      ],
      "name": "Keep3rJobSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "KeeperSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_vestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "_bgn",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "_clf",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "_fin",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_tot",
          "type": "uint128"
        }
      ],
      "name": "VestSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAI_JOIN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DSS_VEST",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAKER_DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOW",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_minBuffer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBuffer",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDaiUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "credits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_daiCredits",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_invoiceNonce",
          "type": "uint256"
        }
      ],
      "name": "deleteInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "invoiceAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasCostETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimableDai",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "invoiceGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invoiceNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "job",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keep3r",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "sendDust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBuffer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBuffer",
          "type": "uint256"
        }
      ],
      "name": "setBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keep3r",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_job",
          "type": "address"
        }
      ],
      "name": "setKeep3rJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "setKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "setPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vestId",
          "type": "uint256"
        }
      ],
      "name": "setVestId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3718fe7299610e31a2f10fb6f98ebf0e7b97b5e5bd7ad5143fa70b351d4e3da0",
  "receipt": {
    "to": null,
    "from": "0x54054EA2db6eDC336cB87966815FD66Cc337f224",
    "contractAddress": "0x37b375e3D418fbECba6b283e704F840AB32f3b3C",
    "transactionIndex": 235,
    "gasUsed": "1461919",
    "logsBloom": "0x
    "blockHash": "0x40cdc53f4e07e1fd7f669cfef63cf0e7c954fdb9f1c2e65ad4831ec7541d2257",
    "transactionHash": "0x3718fe7299610e31a2f10fb6f98ebf0e7b97b5e5bd7ad5143fa70b351d4e3da0",
    "logs": [
      {
        "transactionIndex": 235,
        "blockNumber": 15102642,
        "transactionHash": "0x3718fe7299610e31a2f10fb6f98ebf0e7b97b5e5bd7ad5143fa70b351d4e3da0",
        "address": "0x37b375e3D418fbECba6b283e704F840AB32f3b3C",
        "topics": [
          "0x575b1e14d0e4daeb6a32c66b32cfdea5b2c73f8aa141c107d87c903e58106e10"
        ],
        "data": "0x0000000000000000000000000000000000000000000000d8d726b7177a80000000000000000000000000000000000000000000000000043c33c1937564800000",
        "logIndex": 310,
        "blockHash": "0x40cdc53f4e07e1fd7f669cfef63cf0e7c954fdb9f1c2e65ad4831ec7541d2257"
      },
      {
        "transactionIndex": 235,
        "blockNumber": 15102642,
        "transactionHash": "0x3718fe7299610e31a2f10fb6f98ebf0e7b97b5e5bd7ad5143fa70b351d4e3da0",
        "address": "0x37b375e3D418fbECba6b283e704F840AB32f3b3C",
        "topics": [
          "0xf5e10d0ae40ac48b447a4151e58370c547304f802ae1b11dea98176396cfc287"
        ],
        "data": "0x000000000000000000000000eb02addcfd8b773a5ffa6b9d1fe99c566f8c44cc0000000000000000000000005d469e1ef75507b0e0439667ae45e280b9d81b9c",
        "logIndex": 311,
        "blockHash": "0x40cdc53f4e07e1fd7f669cfef63cf0e7c954fdb9f1c2e65ad4831ec7541d2257"
      },
      {
        "transactionIndex": 235,
        "blockNumber": 15102642,
        "transactionHash": "0x3718fe7299610e31a2f10fb6f98ebf0e7b97b5e5bd7ad5143fa70b351d4e3da0",
        "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000037b375e3d418fbecba6b283e704f840ab32f3b3c",
          "0x0000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 312,
        "blockHash": "0x40cdc53f4e07e1fd7f669cfef63cf0e7c954fdb9f1c2e65ad4831ec7541d2257"
      }
    ],
    "blockNumber": 15102642,
    "cumulativeGasUsed": "18456156",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x45fEEBbd5Cf86dF61be8F81025E22Ae07a07cB23"
  ],
  "numDeployments": 3,
  "solcInputHash": "735163c6277dc42544fbb955906c3085",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncorrectVestId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinBuffer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPendingGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minBuffer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBuffer\",\"type\":\"uint256\"}],\"name\":\"BufferSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_refilled\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_returned\",\"type\":\"uint256\"}],\"name\":\"ClaimedDai\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"DeletedInvoice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"DustSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasCostETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimableDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"InvoicedGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"}],\"name\":\"Keep3rJobSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"KeeperSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_vestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"_bgn\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"_clf\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"_fin\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_tot\",\"type\":\"uint128\"}],\"name\":\"VestSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_JOIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DSS_VEST\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAKER_DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOW\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuffer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDaiUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"credits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_daiCredits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_invoiceNonce\",\"type\":\"uint256\"}],\"name\":\"deleteInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invoiceAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasCostETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimableDai\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"invoiceGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invoiceNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"job\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3r\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sendDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuffer\",\"type\":\"uint256\"}],\"name\":\"setBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"}],\"name\":\"setKeep3rJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestId\",\"type\":\"uint256\"}],\"name\":\"setVestId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"credits()\":{\"returns\":{\"_daiCredits\":\"The amount of DAI credits on the Keep3r Job\"}},\"deleteInvoice(uint256)\":{\"params\":{\"_invoiceNonce\":\"The number ID of the deleted invoice\"}},\"invoiceGas(uint256,uint256,string)\":{\"params\":{\"_claimableDai\":\"The equivalent amount of DAI to be charged for the gas amount\",\"_description\":\"A text description to explain the nature of the invoice\",\"_gasCostETH\":\"The amount of gas invoiced in ETH\"}},\"sendDust(address,uint256,address)\":{\"params\":{\"_amount\":\"The amont of the token that will be transferred\",\"_to\":\"The address that will receive the idle funds\",\"_token\":\"The token that will be transferred\"}},\"setKeep3rJob(address,address)\":{\"params\":{\"_job\":\"The address of the Job contract\",\"_keep3r\":\"The address of Keep3r where the job is registered\"}},\"setKeeper(address)\":{\"params\":{\"_keeper\":\"The address allowed to upkeep the claim function\"}},\"setPendingGovernor(address)\":{\"params\":{\"_pendingGovernor\":\"The address being proposed as the new governance\"}},\"setVestId(uint256)\":{\"params\":{\"_vestId\":\"The numeric ID of the vest\"}}},\"stateVariables\":{\"daiToClaim\":{\"return\":\"_dai The amount of DAI currently in debt to the contract\",\"returns\":{\"_0\":\"_dai The amount of DAI currently in debt to the contract\"}},\"invoiceAmount\":{\"params\":{\"_invoiceNonce\":\"The invoice ID\"},\"return\":\"_invoiceDai The amount of invoiced DAI\",\"returns\":{\"_0\":\"_invoiceDai The amount of invoiced DAI\"}},\"job\":{\"return\":\"_job The address of the Job contract\",\"returns\":{\"_0\":\"_job The address of the Job contract\"}},\"keep3r\":{\"return\":\"_keep3r The address of Keep3r where the job is registered\",\"returns\":{\"_0\":\"_keep3r The address of Keep3r where the job is registered\"}},\"keeper\":{\"return\":\"_keeper The address allowed to upkeep the claim function\",\"returns\":{\"_0\":\"_keeper The address allowed to upkeep the claim function\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IncorrectVestId()\":[{\"notice\":\"Throws when the provided vest ID doesn't have contract as beneficiary\"}],\"InvoiceClaimed()\":[{\"notice\":\"Throws when the invoice to be deleted has already been claimed\"}],\"MinBuffer()\":[{\"notice\":\"Throws when the vested DAI is less than MinBuffer\"}],\"OnlyGovernor()\":[{\"notice\":\"Throws if the caller of the function is not Governance\"}],\"OnlyKeeper()\":[{\"notice\":\"Throws when an unallowed address tries to trigger upkeep\"}],\"OnlyMaker()\":[{\"notice\":\"Throws when an unallowed address tries to trigger Maker methods\"}],\"OnlyPendingGovernor()\":[{\"notice\":\"Throws if the caller of the function is not pendingGovernance\"}],\"ZeroAddress()\":[{\"notice\":\"Throws if a variable is assigned to the zero address\"}]},\"events\":{\"BufferSet(uint256,uint256)\":{\"notice\":\"Emitted when Maker sets new buffer thresholds\"},\"ClaimedDai(uint256,uint256,uint256)\":{\"notice\":\"Emitted when the DAI vest mechanism is executed\"},\"DeletedInvoice(uint256)\":{\"notice\":\"Emitted when Governor removes an incorrect invoice\"},\"DustSent(address,uint256,address)\":{\"notice\":\"Emitted when dust is sent\"},\"InvoicedGas(uint256,uint256,uint256,string)\":{\"notice\":\"Emitted when Governor adds an invoice to be charged\"},\"Keep3rJobSet(address,address)\":{\"notice\":\"Emitted when Governor changes the Keep3r and Job addresses\"},\"KeeperSet(address)\":{\"notice\":\"Emitted when Governor changes the Keeper address\"},\"PendingGovernorAccepted(address)\":{\"notice\":\"Emitted when pendingGovernance accepts to be governance\"},\"PendingGovernorSet(address,address)\":{\"notice\":\"Emitted when a new governance is proposed\"},\"VestSet(uint256,uint48,uint48,uint48,uint128)\":{\"notice\":\"Emitted when Maker sets a new vest\"}},\"kind\":\"user\",\"methods\":{\"DAI()\":{\"notice\":\"The address of DAI\"},\"DAI_JOIN()\":{\"notice\":\"The address of DAI JOIN\"},\"DSS_VEST()\":{\"notice\":\"The address of DSS VEST\"},\"MAKER_DAO()\":{\"notice\":\"The address of MAKER DAO\"},\"VOW()\":{\"notice\":\"The address of VOW\"},\"acceptPendingGovernor()\":{\"notice\":\"Changes the governance from the current governance to the previously proposed address\"},\"buffer()\":{\"notice\":\"Returns the buffer thresholds\"},\"claimDai()\":{\"notice\":\"Allows Governor to trigger DAI vest\"},\"claimDaiUpkeep()\":{\"notice\":\"Allows Keeper to trigger DAI vest\"},\"credits()\":{\"notice\":\"Amount of credits available\"},\"daiToClaim()\":{\"notice\":\"Sum of invoiced DAI amount minus already claimed DAI\"},\"deleteInvoice(uint256)\":{\"notice\":\"Allows Governor to remove an unclaimed invoice\"},\"governor()\":{\"notice\":\"Stores the governance address\"},\"invoiceAmount(uint256)\":{\"notice\":\"Maps the invoice ID to the invoiced DAI amount\"},\"invoiceGas(uint256,uint256,string)\":{\"notice\":\"Allows Governor to add invoices\"},\"invoiceNonce()\":{\"notice\":\"Current invoice nonce\"},\"maxBuffer()\":{\"notice\":\"The maximum amount of DAI to be vested at a time\"},\"minBuffer()\":{\"notice\":\"The minimum amount of DAI to be vested\"},\"pendingGovernor()\":{\"notice\":\"Stores the pendingGovernance address\"},\"sendDust(address,uint256,address)\":{\"notice\":\"Allows an authorized user to transfer the tokens or eth that may have been left in a contract\"},\"setBuffer(uint256,uint256)\":{\"notice\":\"Allows Maker to set the buffer thresholds\"},\"setKeep3rJob(address,address)\":{\"notice\":\"Allows Governor to set new Keep3rJob\"},\"setKeeper(address)\":{\"notice\":\"Allows Governor to set new Keeeper\"},\"setPendingGovernor(address)\":{\"notice\":\"Proposes a new address to be governance\"},\"setVestId(uint256)\":{\"notice\":\"Allows Governor to set the vest ID\"},\"vestId()\":{\"notice\":\"The Vest ID\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/MakerDAOBudgetManager.sol\":\"MakerDAOBudgetManager\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"solidity/contracts/MakerDAOBudgetManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n\\n  Coded for MakerDAO and The Keep3r Network with \\u2665 by\\n  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2003\\u2003\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\n  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551\\u2003\\u2003\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n  \\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2003\\u2003\\u2591\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n  \\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2551\\u2003\\u2003\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2554\\u2550\\u2588\\u2588\\u2588\\u2588\\u2551\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2003\\u2003\\u2591\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u255a\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u255a\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2003\\u2003\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\n  https://defi.sucks\\n\\n*/\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './MakerDAOParameters.sol';\\nimport './utils/DustCollector.sol';\\n\\nimport '../interfaces/IMakerDAOBudgetManager.sol';\\nimport '../interfaces/external/IKeep3rV2.sol';\\nimport '../interfaces/external/IDaiJoin.sol';\\nimport '../interfaces/external/IDssVest.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\ncontract MakerDAOBudgetManager is IMakerDAOBudgetManager, MakerDAOParameters, DustCollector {\\n  address public override keep3r = 0xeb02addCfD8B773A5FFA6B9d1FE99c566f8c44CC;\\n  address public override job = 0x5D469E1ef75507b0E0439667ae45e280b9D81B9C;\\n  address public override keeper;\\n\\n  uint256 public override daiToClaim;\\n  uint256 public override invoiceNonce;\\n  mapping(uint256 => uint256) public override invoiceAmount;\\n\\n  constructor(address _governor) Governable(_governor) {\\n    emit Keep3rJobSet(keep3r, job);\\n    IERC20(DAI).approve(DAI_JOIN, type(uint256).max);\\n  }\\n\\n  // Views\\n\\n  /// @inheritdoc IMakerDAOBudgetManager\\n  function credits() public view override returns (uint256 _daiCredits) {\\n    return IKeep3rV2(keep3r).jobTokenCredits(job, DAI);\\n  }\\n\\n  // Methods\\n\\n  /// @inheritdoc IMakerDAOBudgetManager\\n  function invoiceGas(\\n    uint256 _gasCostETH,\\n    uint256 _claimableDai,\\n    string memory _description\\n  ) external override onlyGovernor {\\n    daiToClaim += _claimableDai;\\n    invoiceAmount[++invoiceNonce] = _claimableDai;\\n\\n    // emits event to be tracked in DuneAnalytics dashboard & contrast with txs\\n    emit InvoicedGas(invoiceNonce, _gasCostETH, _claimableDai, _description);\\n  }\\n\\n  /// @inheritdoc IMakerDAOBudgetManager\\n  function deleteInvoice(uint256 _invoiceNonce) external override onlyGovernor {\\n    uint256 deleteAmount = invoiceAmount[_invoiceNonce];\\n    if (deleteAmount > daiToClaim) revert InvoiceClaimed();\\n\\n    daiToClaim -= deleteAmount;\\n    delete invoiceAmount[_invoiceNonce];\\n\\n    // emits event to filter out InvoicedGas events\\n    emit DeletedInvoice(_invoiceNonce);\\n  }\\n\\n  /// @inheritdoc IMakerDAOBudgetManager\\n  function claimDai() external override onlyGovernor {\\n    _claimDai();\\n  }\\n\\n  /// @inheritdoc IMakerDAOBudgetManager\\n  function claimDaiUpkeep() external override onlyKeeper {\\n    _claimDai();\\n  }\\n\\n  /// @notice This function handles the flow of Vested DAI\\n  function _claimDai() internal {\\n    // claims DAI\\n    uint256 daiAmount = IERC20(DAI).balanceOf(address(this));\\n    IDssVest(DSS_VEST).vest(vestId);\\n    // removes previous balance from scope\\n    daiAmount = IERC20(DAI).balanceOf(address(this)) - daiAmount;\\n\\n    if (daiAmount < minBuffer) revert MinBuffer();\\n\\n    // returns any DAI above maxBuffer\\n    uint256 daiToReturn;\\n    if (daiAmount > maxBuffer) {\\n      daiToReturn = daiAmount - maxBuffer;\\n      daiAmount = maxBuffer;\\n    }\\n\\n    // checks for DAI debt and reduces debt if applies\\n    uint256 claimableDai;\\n    if (daiToClaim > minBuffer) {\\n      claimableDai = Math.min(daiToClaim, daiAmount);\\n\\n      // reduces debt accountance\\n      daiToClaim -= claimableDai;\\n      daiAmount -= claimableDai;\\n    }\\n\\n    // checks for credits on Keep3rJob and refills up to maxBuffer if possible\\n    uint256 daiCredits = credits();\\n    uint256 creditsToRefill;\\n    if (daiCredits < minBuffer && daiAmount > 0) {\\n      // refill credits up to maxBuffer or available DAI\\n      creditsToRefill = Math.min(maxBuffer - daiCredits, daiAmount);\\n\\n      // refill DAI credits on Keep3rJob\\n      IERC20(DAI).approve(keep3r, uint256(creditsToRefill));\\n      IKeep3rV2(keep3r).addTokenCreditsToJob(job, DAI, uint256(creditsToRefill));\\n\\n      daiAmount -= creditsToRefill;\\n    }\\n\\n    // returns any excess of DAI\\n    daiToReturn += daiAmount;\\n    if (daiToReturn > 0) {\\n      IDaiJoin(DAI_JOIN).join(VOW, daiToReturn);\\n    }\\n\\n    // emits event to be tracked in DuneAnalytics dashboard & tracks DAI flow\\n    emit ClaimedDai(claimableDai, creditsToRefill, daiToReturn);\\n  }\\n\\n  // Parameters\\n\\n  /// @inheritdoc IMakerDAOBudgetManager\\n  function setKeep3rJob(address _keep3r, address _job) external override onlyGovernor {\\n    keep3r = _keep3r;\\n    job = _job;\\n\\n    emit Keep3rJobSet(_keep3r, _job);\\n  }\\n\\n  /// @inheritdoc IMakerDAOBudgetManager\\n  function setKeeper(address _keeper) external override onlyGovernor {\\n    keeper = _keeper;\\n\\n    emit KeeperSet(_keeper);\\n  }\\n\\n  /// @inheritdoc IMakerDAOBudgetManager\\n  function setVestId(uint256 _vestId) public onlyGovernor {\\n    (address _usr, uint48 _bgn, uint48 _clf, uint48 _fin, , , uint128 _tot, ) = IDssVest(DSS_VEST).awards(_vestId);\\n    if (_usr != address(this)) revert IncorrectVestId();\\n    vestId = _vestId;\\n\\n    emit VestSet(_vestId, _bgn, _clf, _fin, _tot);\\n  }\\n\\n  // Modifiers\\n\\n  modifier onlyKeeper() {\\n    if (msg.sender != keeper) revert OnlyKeeper();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xdc2767f439748ac5b573d4c20e1463d2476af8c7eafbc77ad1f8769bea50e68a\",\"license\":\"MIT\"},\"solidity/contracts/MakerDAOParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../interfaces/IMakerDAOParameters.sol';\\nimport '../interfaces/external/IDssVest.sol';\\n\\ncontract MakerDAOParameters is IMakerDAOParameters {\\n  address public constant override DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n  address public constant override DAI_JOIN = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\\n  address public constant override DSS_VEST = 0xa4c22f0e25C6630B2017979AcF1f865e94695C4b;\\n  address public constant override MAKER_DAO = 0xBE8E3e3618f7474F8cB1d074A26afFef007E98FB;\\n  address public constant override VOW = 0xA950524441892A31ebddF91d3cEEFa04Bf454466;\\n\\n  uint256 public override minBuffer = 4_000 ether;\\n  uint256 public override maxBuffer = 20_000 ether;\\n  uint256 public override vestId; // TBD\\n\\n  constructor() {\\n    emit BufferSet(minBuffer, maxBuffer);\\n  }\\n\\n  // Views\\n\\n  /// @inheritdoc IMakerDAOParameters\\n  function buffer() external view override returns (uint256 _minBuffer, uint256 _maxBuffer) {\\n    return (minBuffer, maxBuffer);\\n  }\\n\\n  // Setters\\n\\n  /// @inheritdoc IMakerDAOParameters\\n  function setBuffer(uint256 _minBuffer, uint256 _maxBuffer) external onlyMaker {\\n    minBuffer = _minBuffer;\\n    maxBuffer = _maxBuffer;\\n\\n    emit BufferSet(_minBuffer, _maxBuffer);\\n  }\\n\\n  // Modifiers\\n\\n  modifier onlyMaker() {\\n    if (msg.sender != MAKER_DAO) revert OnlyMaker();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5c09c7445a556b891a61f3a5d8c43e0691233f672bb92f37b4fead8afacea0cb\",\"license\":\"MIT\"},\"solidity/contracts/utils/DustCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './Governable.sol';\\nimport '../../interfaces/utils/IDustCollector.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nabstract contract DustCollector is IDustCollector, Governable {\\n  using SafeERC20 for IERC20;\\n\\n  address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  function sendDust(\\n    address _token,\\n    uint256 _amount,\\n    address _to\\n  ) external override onlyGovernor {\\n    if (_to == address(0)) revert ZeroAddress();\\n    if (_token == ETH_ADDRESS) {\\n      payable(_to).transfer(_amount);\\n    } else {\\n      IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n    emit DustSent(_token, _amount, _to);\\n  }\\n}\\n\",\"keccak256\":\"0x656dcf754564bba2c15e2c0b01139353e0bda8e487ebc9447018e06c7fd317bb\",\"license\":\"MIT\"},\"solidity/contracts/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../../interfaces/utils/IGovernable.sol';\\n\\nabstract contract Governable is IGovernable {\\n  address public override governor;\\n  address public override pendingGovernor;\\n\\n  constructor(address _governor) {\\n    if (_governor == address(0)) revert ZeroAddress();\\n    governor = _governor;\\n  }\\n\\n  function setPendingGovernor(address _pendingGovernor) external override onlyGovernor {\\n    if (_pendingGovernor == address(0)) revert ZeroAddress();\\n    pendingGovernor = _pendingGovernor;\\n    emit PendingGovernorSet(governor, pendingGovernor);\\n  }\\n\\n  function acceptPendingGovernor() external override onlyPendingGovernor {\\n    governor = pendingGovernor;\\n    pendingGovernor = address(0);\\n    emit PendingGovernorAccepted(governor);\\n  }\\n\\n  modifier onlyGovernor() {\\n    if (msg.sender != governor) revert OnlyGovernor();\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor() {\\n    if (msg.sender != pendingGovernor) revert OnlyPendingGovernor();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xad21c834fa84c1a354cd787b8852d9eff7da3a881341feed1ba4a0a1a869d5a8\",\"license\":\"MIT\"},\"solidity/interfaces/IMakerDAOBudgetManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\n/// @title MakerDAOBudgetManager contract\\n/// @notice Contains all the views and methods used for handling DAI vesting\\ninterface IMakerDAOBudgetManager {\\n  // Events\\n\\n  /// @notice Emitted when Governor adds an invoice to be charged\\n  /// @param _nonce The number ID of the invoice\\n  /// @param _gasCostETH The amount of gas invoiced in ETH\\n  /// @param _claimableDai The equivalent amount of DAI to be charged for the gas amount\\n  /// @param _description A text description to explain the nature of the invoice\\n  event InvoicedGas(uint256 indexed _nonce, uint256 _gasCostETH, uint256 _claimableDai, string _description);\\n\\n  /// @notice Emitted when Governor removes an incorrect invoice\\n  /// @param _nonce The number ID of the deleted invoice\\n  event DeletedInvoice(uint256 indexed _nonce);\\n\\n  /// @notice Emitted when the DAI vest mechanism is executed\\n  /// @param _claimed The amount of DAI used to reduce invoice debt\\n  /// @param _refilled The amount of DAI sent to the Keep3rJob to refill credits\\n  /// @param _returned The amount of DAI returned to Maker\\n  /// @dev The total sum _claimed + _refilled + _returned should be equivalent to vested DAI\\n  event ClaimedDai(uint256 _claimed, uint256 _refilled, uint256 _returned);\\n\\n  /// @notice Emitted when Governor changes the Keep3r and Job addresses\\n  /// @param _keep3r The address of Keep3r where the job is registered\\n  /// @param _job The address of the Job contract\\n  /// @dev Both parameters are changed together to avoid any broken references\\n  event Keep3rJobSet(address _keep3r, address _job);\\n\\n  /// @notice Emitted when Governor changes the Keeper address\\n  /// @param _keeper The address allowed to upkeep the claim function\\n  event KeeperSet(address _keeper);\\n\\n  /// @notice Emitted when Maker sets a new vest\\n  /// @param _vestId The ID of the new vest\\n  /// @param _bgn The start timestamp of the vest\\n  /// @param _clf The cliff timestamp of the vest\\n  /// @param _fin The end timestamp of the vest\\n  /// @param _tot The total amount of DAI on the vest\\n  event VestSet(uint256 indexed _vestId, uint48 _bgn, uint48 _clf, uint48 _fin, uint128 _tot);\\n\\n  // Errors\\n\\n  /// @notice Throws when the vested DAI is less than MinBuffer\\n  error MinBuffer();\\n  /// @notice Throws when the invoice to be deleted has already been claimed\\n  error InvoiceClaimed();\\n  /// @notice Throws when an unallowed address tries to trigger upkeep\\n  error OnlyKeeper();\\n  /// @notice Throws when the provided vest ID doesn't have contract as beneficiary\\n  error IncorrectVestId();\\n\\n  // Views\\n\\n  /// @notice Sum of invoiced DAI amount minus already claimed DAI\\n  /// @return _dai The amount of DAI currently in debt to the contract\\n  function daiToClaim() external returns (uint256 _dai);\\n\\n  /// @return _keep3r The address of Keep3r where the job is registered\\n  function keep3r() external returns (address _keep3r);\\n\\n  /// @return _job The address of the Job contract\\n  function job() external returns (address _job);\\n\\n  /// @return _keeper The address allowed to upkeep the claim function\\n  function keeper() external returns (address _keeper);\\n\\n  /// @notice Maps the invoice ID to the invoiced DAI amount\\n  /// @param _invoiceNonce The invoice ID\\n  /// @return _invoiceDai The amount of invoiced DAI\\n  function invoiceAmount(uint256 _invoiceNonce) external returns (uint256 _invoiceDai);\\n\\n  /// @notice Current invoice nonce\\n  function invoiceNonce() external returns (uint256);\\n\\n  /// @notice Amount of credits available\\n  /// @return _daiCredits The amount of DAI credits on the Keep3r Job\\n  function credits() external view returns (uint256 _daiCredits);\\n\\n  // Methods\\n\\n  /// @notice Allows Governor to add invoices\\n  /// @param _gasCostETH The amount of gas invoiced in ETH\\n  /// @param _claimableDai The equivalent amount of DAI to be charged for the gas amount\\n  /// @param _description A text description to explain the nature of the invoice\\n  function invoiceGas(\\n    uint256 _gasCostETH,\\n    uint256 _claimableDai,\\n    string memory _description\\n  ) external;\\n\\n  /// @notice Allows Governor to remove an unclaimed invoice\\n  /// @param _invoiceNonce The number ID of the deleted invoice\\n  function deleteInvoice(uint256 _invoiceNonce) external;\\n\\n  /// @notice Allows Governor to trigger DAI vest\\n  function claimDai() external;\\n\\n  /// @notice Allows Keeper to trigger DAI vest\\n  function claimDaiUpkeep() external;\\n\\n  /// @notice Allows Governor to set new Keep3rJob\\n  /// @param _keep3r The address of Keep3r where the job is registered\\n  /// @param _job The address of the Job contract\\n  function setKeep3rJob(address _keep3r, address _job) external;\\n\\n  /// @notice Allows Governor to set new Keeeper\\n  /// @param _keeper The address allowed to upkeep the claim function\\n  function setKeeper(address _keeper) external;\\n\\n  /// @notice Allows Governor to set the vest ID\\n  /// @param _vestId The numeric ID of the vest\\n  function setVestId(uint256 _vestId) external;\\n}\\n\",\"keccak256\":\"0x9ee7dea665ca29fe5415c08ca1c4e46d7525e9643f54b30e4f09090f4632e881\",\"license\":\"MIT\"},\"solidity/interfaces/IMakerDAOParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\n/// @title MakerDaoParameters contract\\n/// @notice Handles all the MakerDAO parameters needed to vest DAI\\ninterface IMakerDAOParameters {\\n  // Events\\n\\n  /// @notice Emitted when Maker sets new buffer thresholds\\n  /// @param _minBuffer Minimum amount to DAI to be claimable\\n  /// @param _maxBuffer Maximum amount to DAI to be claimable\\n  event BufferSet(uint256 _minBuffer, uint256 _maxBuffer);\\n  // Errors\\n\\n  /// @notice Throws when an unallowed address tries to trigger Maker methods\\n  error OnlyMaker();\\n\\n  // Views\\n\\n  /// @notice The address of DAI\\n  function DAI() external view returns (address dai);\\n\\n  /// @notice The address of DAI JOIN\\n  function DAI_JOIN() external view returns (address daiJoin);\\n\\n  /// @notice The address of DSS VEST\\n  function DSS_VEST() external view returns (address dssVest);\\n\\n  /// @notice The address of MAKER DAO\\n  function MAKER_DAO() external view returns (address makerDao);\\n\\n  /// @notice The address of VOW\\n  function VOW() external view returns (address vow);\\n\\n  /// @notice The minimum amount of DAI to be vested\\n  function minBuffer() external view returns (uint256 minBuffer);\\n\\n  /// @notice The maximum amount of DAI to be vested at a time\\n  function maxBuffer() external view returns (uint256 maxBuffer);\\n\\n  /// @notice Returns the buffer thresholds\\n  function buffer() external view returns (uint256 minBuffer, uint256 maxBuffer);\\n\\n  // Methods\\n\\n  /// @notice The Vest ID\\n  function vestId() external view returns (uint256 vestId);\\n\\n  /// @notice Allows Maker to set the buffer thresholds\\n  function setBuffer(uint256 _minBuffer, uint256 _maxBuffer) external;\\n}\\n\",\"keccak256\":\"0x1ac08fa4a5a81ad006385d7282150d3f0bf8446031d67b8a6c106fed21432971\",\"license\":\"MIT\"},\"solidity/interfaces/external/IDaiJoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IDaiJoin {\\n  function join(address usr, uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x874e05ae775a6dc633954b9c1314c986a38e48380b46d09cb3121e3203b74d93\",\"license\":\"MIT\"},\"solidity/interfaces/external/IDssVest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IDssVest {\\n  function vest(uint256 _id) external;\\n\\n  function vest(uint256 _id, uint256 _maxAmt) external;\\n\\n  struct Award {\\n    address usr; // Vesting recipient\\n    uint48 bgn; // Start of vesting period  [timestamp]\\n    uint48 clf; // The cliff date           [timestamp]\\n    uint48 fin; // End of vesting period    [timestamp]\\n    address mgr; // A manager address that can yank\\n    uint8 res; // Restricted\\n    uint128 tot; // Total reward amount\\n    uint128 rxd; // Amount of vest claimed\\n  }\\n\\n  function awards(uint256 _id)\\n    external\\n    view\\n    returns (\\n      address usr, // Vesting recipient\\n      uint48 bgn, // Start of vesting period  [timestamp]\\n      uint48 clf, // The cliff date           [timestamp]\\n      uint48 fin, // End of vesting period    [timestamp]\\n      address mgr, // A manager address that can yank\\n      uint8 res, // Restricted\\n      uint128 tot, // Total reward amount\\n      uint128 rxd // Amount of vest claimed\\n    );\\n}\\n\",\"keccak256\":\"0x9d8ebaa74a94d3420563a6b3a102778763b8d014cc5968168fbaf5de6ed977b3\",\"license\":\"MIT\"},\"solidity/interfaces/external/IKeep3rV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IKeep3rV2 {\\n  /// @notice Stores the tick information of the different liquidity pairs\\n  struct TickCache {\\n    int56 current; // Tracks the current tick\\n    int56 difference; // Stores the difference between the current tick and the last tick\\n    uint256 period; // Stores the period at which the last observation was made\\n  }\\n\\n  // Events\\n\\n  /// @notice Emitted when the Keep3rHelper address is changed\\n  /// @param _keep3rHelper The address of Keep3rHelper's contract\\n  event Keep3rHelperChange(address _keep3rHelper);\\n\\n  /// @notice Emitted when the Keep3rV1 address is changed\\n  /// @param _keep3rV1 The address of Keep3rV1's contract\\n  event Keep3rV1Change(address _keep3rV1);\\n\\n  /// @notice Emitted when the Keep3rV1Proxy address is changed\\n  /// @param _keep3rV1Proxy The address of Keep3rV1Proxy's contract\\n  event Keep3rV1ProxyChange(address _keep3rV1Proxy);\\n\\n  /// @notice Emitted when the KP3R-WETH pool address is changed\\n  /// @param _kp3rWethPool The address of the KP3R-WETH pool\\n  event Kp3rWethPoolChange(address _kp3rWethPool);\\n\\n  /// @notice Emitted when bondTime is changed\\n  /// @param _bondTime The new bondTime\\n  event BondTimeChange(uint256 _bondTime);\\n\\n  /// @notice Emitted when _liquidityMinimum is changed\\n  /// @param _liquidityMinimum The new _liquidityMinimum\\n  event LiquidityMinimumChange(uint256 _liquidityMinimum);\\n\\n  /// @notice Emitted when _unbondTime is changed\\n  /// @param _unbondTime The new _unbondTime\\n  event UnbondTimeChange(uint256 _unbondTime);\\n\\n  /// @notice Emitted when _rewardPeriodTime is changed\\n  /// @param _rewardPeriodTime The new _rewardPeriodTime\\n  event RewardPeriodTimeChange(uint256 _rewardPeriodTime);\\n\\n  /// @notice Emitted when the inflationPeriod is changed\\n  /// @param _inflationPeriod The new inflationPeriod\\n  event InflationPeriodChange(uint256 _inflationPeriod);\\n\\n  /// @notice Emitted when the fee is changed\\n  /// @param _fee The new token credits fee\\n  event FeeChange(uint256 _fee);\\n\\n  /// @notice Emitted when a slasher is added\\n  /// @param _slasher Address of the added slasher\\n  event SlasherAdded(address _slasher);\\n\\n  /// @notice Emitted when a slasher is removed\\n  /// @param _slasher Address of the removed slasher\\n  event SlasherRemoved(address _slasher);\\n\\n  /// @notice Emitted when a disputer is added\\n  /// @param _disputer Address of the added disputer\\n  event DisputerAdded(address _disputer);\\n\\n  /// @notice Emitted when a disputer is removed\\n  /// @param _disputer Address of the removed disputer\\n  event DisputerRemoved(address _disputer);\\n\\n  /// @notice Emitted when the bonding process of a new keeper begins\\n  /// @param _keeper The caller of Keep3rKeeperFundable#bond function\\n  /// @param _bonding The asset the keeper has bonded\\n  /// @param _amount The amount the keeper has bonded\\n  event Bonding(address indexed _keeper, address indexed _bonding, uint256 _amount);\\n\\n  /// @notice Emitted when a keeper or job begins the unbonding process to withdraw the funds\\n  /// @param _keeperOrJob The keeper or job that began the unbonding process\\n  /// @param _unbonding The liquidity pair or asset being unbonded\\n  /// @param _amount The amount being unbonded\\n  event Unbonding(address indexed _keeperOrJob, address indexed _unbonding, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rKeeperFundable#activate is called\\n  /// @param _keeper The keeper that has been activated\\n  /// @param _bond The asset the keeper has bonded\\n  /// @param _amount The amount of the asset the keeper has bonded\\n  event Activation(address indexed _keeper, address indexed _bond, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rKeeperFundable#withdraw is called\\n  /// @param _keeper The caller of Keep3rKeeperFundable#withdraw function\\n  /// @param _bond The asset to withdraw from the bonding pool\\n  /// @param _amount The amount of funds withdrawn\\n  event Withdrawal(address indexed _keeper, address indexed _bond, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rKeeperDisputable#slash is called\\n  /// @param _keeper The slashed keeper\\n  /// @param _slasher The user that called Keep3rKeeperDisputable#slash\\n  /// @param _amount The amount of credits slashed from the keeper\\n  event KeeperSlash(address indexed _keeper, address indexed _slasher, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rKeeperDisputable#revoke is called\\n  /// @param _keeper The revoked keeper\\n  /// @param _slasher The user that called Keep3rKeeperDisputable#revoke\\n  event KeeperRevoke(address indexed _keeper, address indexed _slasher);\\n\\n  /// @notice Emitted when Keep3rJobFundableCredits#addTokenCreditsToJob is called\\n  /// @param _job The address of the job being credited\\n  /// @param _token The address of the token being provided\\n  /// @param _provider The user that calls the function\\n  /// @param _amount The amount of credit being added to the job\\n  event TokenCreditAddition(address indexed _job, address indexed _token, address indexed _provider, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rJobFundableCredits#withdrawTokenCreditsFromJob is called\\n  /// @param _job The address of the job from which the credits are withdrawn\\n  /// @param _token The credit being withdrawn from the job\\n  /// @param _receiver The user that receives the tokens\\n  /// @param _amount The amount of credit withdrawn\\n  event TokenCreditWithdrawal(address indexed _job, address indexed _token, address indexed _receiver, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rJobFundableLiquidity#approveLiquidity function is called\\n  /// @param _liquidity The address of the liquidity pair being approved\\n  event LiquidityApproval(address _liquidity);\\n\\n  /// @notice Emitted when Keep3rJobFundableLiquidity#revokeLiquidity function is called\\n  /// @param _liquidity The address of the liquidity pair being revoked\\n  event LiquidityRevocation(address _liquidity);\\n\\n  /// @notice Emitted when IKeep3rJobFundableLiquidity#addLiquidityToJob function is called\\n  /// @param _job The address of the job to which liquidity will be added\\n  /// @param _liquidity The address of the liquidity being added\\n  /// @param _provider The user that calls the function\\n  /// @param _amount The amount of liquidity being added\\n  event LiquidityAddition(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _amount);\\n\\n  /// @notice Emitted when IKeep3rJobFundableLiquidity#withdrawLiquidityFromJob function is called\\n  /// @param _job The address of the job of which liquidity will be withdrawn from\\n  /// @param _liquidity The address of the liquidity being withdrawn\\n  /// @param _receiver The receiver of the liquidity tokens\\n  /// @param _amount The amount of liquidity being withdrawn from the job\\n  event LiquidityWithdrawal(address indexed _job, address indexed _liquidity, address indexed _receiver, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rJobFundableLiquidity#addLiquidityToJob function is called\\n  /// @param _job The address of the job whose credits will be updated\\n  /// @param _rewardedAt The time at which the job was last rewarded\\n  /// @param _currentCredits The current credits of the job\\n  /// @param _periodCredits The credits of the job for the current period\\n  event LiquidityCreditsReward(address indexed _job, uint256 _rewardedAt, uint256 _currentCredits, uint256 _periodCredits);\\n\\n  /// @notice Emitted when Keep3rJobFundableLiquidity#forceLiquidityCreditsToJob function is called\\n  /// @param _job The address of the job whose credits will be updated\\n  /// @param _rewardedAt The time at which the job was last rewarded\\n  /// @param _currentCredits The current credits of the job\\n  event LiquidityCreditsForced(address indexed _job, uint256 _rewardedAt, uint256 _currentCredits);\\n\\n  /// @notice Emitted when Keep3rJobManager#addJob is called\\n  /// @param _job The address of the job to add\\n  /// @param _jobOwner The job's owner\\n  event JobAddition(address indexed _job, address indexed _jobOwner);\\n\\n  /// @notice Emitted when a keeper is validated before a job\\n  /// @param _gasLeft The amount of gas that the transaction has left at the moment of keeper validation\\n  event KeeperValidation(uint256 _gasLeft);\\n\\n  /// @notice Emitted when a keeper works a job\\n  /// @param _credit The address of the asset in which the keeper is paid\\n  /// @param _job The address of the job the keeper has worked\\n  /// @param _keeper The address of the keeper that has worked the job\\n  /// @param _amount The amount that has been paid out to the keeper in exchange for working the job\\n  /// @param _gasLeft The amount of gas that the transaction has left at the moment of payment\\n  event KeeperWork(address indexed _credit, address indexed _job, address indexed _keeper, uint256 _amount, uint256 _gasLeft);\\n\\n  /// @notice Emitted when Keep3rJobOwnership#changeJobOwnership is called\\n  /// @param _job The address of the job proposed to have a change of owner\\n  /// @param _owner The current owner of the job\\n  /// @param _pendingOwner The new address proposed to be the owner of the job\\n  event JobOwnershipChange(address indexed _job, address indexed _owner, address indexed _pendingOwner);\\n\\n  /// @notice Emitted when Keep3rJobOwnership#JobOwnershipAssent is called\\n  /// @param _job The address of the job which the proposed owner will now own\\n  /// @param _previousOwner The previous owner of the job\\n  /// @param _newOwner The newowner of the job\\n  event JobOwnershipAssent(address indexed _job, address indexed _previousOwner, address indexed _newOwner);\\n\\n  /// @notice Emitted when Keep3rJobMigration#migrateJob function is called\\n  /// @param _fromJob The address of the job that requests to migrate\\n  /// @param _toJob The address at which the job requests to migrate\\n  event JobMigrationRequested(address indexed _fromJob, address _toJob);\\n\\n  /// @notice Emitted when Keep3rJobMigration#acceptJobMigration function is called\\n  /// @param _fromJob The address of the job that requested to migrate\\n  /// @param _toJob The address at which the job had requested to migrate\\n  event JobMigrationSuccessful(address _fromJob, address indexed _toJob);\\n\\n  /// @notice Emitted when Keep3rJobDisputable#slashTokenFromJob is called\\n  /// @param _job The address of the job from which the token will be slashed\\n  /// @param _token The address of the token being slashed\\n  /// @param _slasher The user that slashes the token\\n  /// @param _amount The amount of the token being slashed\\n  event JobSlashToken(address indexed _job, address _token, address indexed _slasher, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rJobDisputable#slashLiquidityFromJob is called\\n  /// @param _job The address of the job from which the liquidity will be slashed\\n  /// @param _liquidity The address of the liquidity being slashed\\n  /// @param _slasher The user that slashes the liquidity\\n  /// @param _amount The amount of the liquidity being slashed\\n  event JobSlashLiquidity(address indexed _job, address _liquidity, address indexed _slasher, uint256 _amount);\\n\\n  /// @notice Emitted when a keeper or a job is disputed\\n  /// @param _jobOrKeeper The address of the disputed keeper/job\\n  /// @param _disputer The user that called the function and disputed the keeper\\n  event Dispute(address indexed _jobOrKeeper, address indexed _disputer);\\n\\n  /// @notice Emitted when a dispute is resolved\\n  /// @param _jobOrKeeper The address of the disputed keeper/job\\n  /// @param _resolver The user that called the function and resolved the dispute\\n  event Resolve(address indexed _jobOrKeeper, address indexed _resolver);\\n\\n  // Errors\\n\\n  /// @notice Throws if the reward period is less than the minimum reward period time\\n  error MinRewardPeriod();\\n\\n  /// @notice Throws if either a job or a keeper is disputed\\n  error Disputed();\\n\\n  /// @notice Throws if there are no bonded assets\\n  error BondsUnexistent();\\n\\n  /// @notice Throws if the time required to bond an asset has not passed yet\\n  error BondsLocked();\\n\\n  /// @notice Throws if there are no bonds to withdraw\\n  error UnbondsUnexistent();\\n\\n  /// @notice Throws if the time required to withdraw the bonds has not passed yet\\n  error UnbondsLocked();\\n\\n  /// @notice Throws if the address is already a registered slasher\\n  error SlasherExistent();\\n\\n  /// @notice Throws if caller is not a registered slasher\\n  error SlasherUnexistent();\\n\\n  /// @notice Throws if the address is already a registered disputer\\n  error DisputerExistent();\\n\\n  /// @notice Throws if caller is not a registered disputer\\n  error DisputerUnexistent();\\n\\n  /// @notice Throws if the msg.sender is not a slasher or is not a part of governance\\n  error OnlySlasher();\\n\\n  /// @notice Throws if the msg.sender is not a disputer or is not a part of governance\\n  error OnlyDisputer();\\n\\n  /// @notice Throws when an address is passed as a job, but that address is not a job\\n  error JobUnavailable();\\n\\n  /// @notice Throws when an action that requires an undisputed job is applied on a disputed job\\n  error JobDisputed();\\n\\n  /// @notice Throws when the address that is trying to register as a job is already a job\\n  error AlreadyAJob();\\n\\n  /// @notice Throws when the token is KP3R, as it should not be used for direct token payments\\n  error TokenUnallowed();\\n\\n  /// @notice Throws when the token withdraw cooldown has not yet passed\\n  error JobTokenCreditsLocked();\\n\\n  /// @notice Throws when the user tries to withdraw more tokens than it has\\n  error InsufficientJobTokenCredits();\\n\\n  /// @notice Throws when trying to add a job that has already been added\\n  error JobAlreadyAdded();\\n\\n  /// @notice Throws when the address that is trying to register as a keeper is already a keeper\\n  error AlreadyAKeeper();\\n\\n  /// @notice Throws when the liquidity being approved has already been approved\\n  error LiquidityPairApproved();\\n\\n  /// @notice Throws when the liquidity being removed has not been approved\\n  error LiquidityPairUnexistent();\\n\\n  /// @notice Throws when trying to add liquidity to an unapproved pool\\n  error LiquidityPairUnapproved();\\n\\n  /// @notice Throws when the job doesn't have the requested liquidity\\n  error JobLiquidityUnexistent();\\n\\n  /// @notice Throws when trying to remove more liquidity than the job has\\n  error JobLiquidityInsufficient();\\n\\n  /// @notice Throws when trying to add less liquidity than the minimum liquidity required\\n  error JobLiquidityLessThanMin();\\n\\n  /// @notice Throws if a variable is assigned to the zero address\\n  error ZeroAddress();\\n\\n  /// @notice Throws if the address claiming to be a job is not in the list of approved jobs\\n  error JobUnapproved();\\n\\n  /// @notice Throws if the amount of funds in the job is less than the payment that must be paid to the keeper that works that job\\n  error InsufficientFunds();\\n\\n  /// @notice Throws when the caller of the function is not the job owner\\n  error OnlyJobOwner();\\n\\n  /// @notice Throws when the caller of the function is not the pending job owner\\n  error OnlyPendingJobOwner();\\n\\n  /// @notice Throws when the address of the job that requests to migrate wants to migrate to its same address\\n  error JobMigrationImpossible();\\n\\n  /// @notice Throws when the _toJob address differs from the address being tracked in the pendingJobMigrations mapping\\n  error JobMigrationUnavailable();\\n\\n  /// @notice Throws when cooldown between migrations has not yet passed\\n  error JobMigrationLocked();\\n\\n  /// @notice Throws when the token trying to be slashed doesn't exist\\n  error JobTokenUnexistent();\\n\\n  /// @notice Throws when someone tries to slash more tokens than the job has\\n  error JobTokenInsufficient();\\n\\n  /// @notice Throws when a job or keeper is already disputed\\n  error AlreadyDisputed();\\n\\n  /// @notice Throws when a job or keeper is not disputed and someone tries to resolve the dispute\\n  error NotDisputed();\\n\\n  // Variables\\n\\n  /// @notice Address of Keep3rHelper's contract\\n  /// @return _keep3rHelper The address of Keep3rHelper's contract\\n  function keep3rHelper() external view returns (address _keep3rHelper);\\n\\n  /// @notice Address of Keep3rV1's contract\\n  /// @return _keep3rV1 The address of Keep3rV1's contract\\n  function keep3rV1() external view returns (address _keep3rV1);\\n\\n  /// @notice Address of Keep3rV1Proxy's contract\\n  /// @return _keep3rV1Proxy The address of Keep3rV1Proxy's contract\\n  function keep3rV1Proxy() external view returns (address _keep3rV1Proxy);\\n\\n  /// @notice Address of the KP3R-WETH pool\\n  /// @return _kp3rWethPool The address of KP3R-WETH pool\\n  function kp3rWethPool() external view returns (address _kp3rWethPool);\\n\\n  /// @notice The amount of time required to pass after a keeper has bonded assets for it to be able to activate\\n  /// @return _days The required bondTime in days\\n  function bondTime() external view returns (uint256 _days);\\n\\n  /// @notice The amount of time required to pass before a keeper can unbond what he has bonded\\n  /// @return _days The required unbondTime in days\\n  function unbondTime() external view returns (uint256 _days);\\n\\n  /// @notice The minimum amount of liquidity required to fund a job per liquidity\\n  /// @return _amount The minimum amount of liquidity in KP3R\\n  function liquidityMinimum() external view returns (uint256 _amount);\\n\\n  /// @notice The amount of time between each scheduled credits reward given to a job\\n  /// @return _days The reward period in days\\n  function rewardPeriodTime() external view returns (uint256 _days);\\n\\n  /// @notice The inflation period is the denominator used to regulate the emission of KP3R\\n  /// @return _period The denominator used to regulate the emission of KP3R\\n  function inflationPeriod() external view returns (uint256 _period);\\n\\n  /// @notice The fee to be sent to governance when a user adds liquidity to a job\\n  /// @return _amount The fee amount to be sent to governance when a user adds liquidity to a job\\n  function fee() external view returns (uint256 _amount);\\n\\n  // solhint-disable func-name-mixedcase\\n  /// @notice The base that will be used to calculate the fee\\n  /// @return _base The base that will be used to calculate the fee\\n  function BASE() external view returns (uint256 _base);\\n\\n  /// @notice The minimum rewardPeriodTime value to be set\\n  /// @return _minPeriod The minimum reward period in seconds\\n  function MIN_REWARD_PERIOD_TIME() external view returns (uint256 _minPeriod);\\n\\n  /// @notice Maps an address to a boolean to determine whether the address is a slasher or not.\\n  /// @return _isSlasher Whether the address is a slasher or not\\n  function slashers(address _slasher) external view returns (bool _isSlasher);\\n\\n  /// @notice Maps an address to a boolean to determine whether the address is a disputer or not.\\n  /// @return _isDisputer Whether the address is a disputer or not\\n  function disputers(address _disputer) external view returns (bool _isDisputer);\\n\\n  /// @notice Tracks the total KP3R earnings of a keeper since it started working\\n  /// @return _workCompleted Total KP3R earnings of a keeper since it started working\\n  function workCompleted(address _keeper) external view returns (uint256 _workCompleted);\\n\\n  /// @notice Tracks when a keeper was first registered\\n  /// @return timestamp The time at which the keeper was first registered\\n  function firstSeen(address _keeper) external view returns (uint256 timestamp);\\n\\n  /// @notice Tracks if a keeper or job has a pending dispute\\n  /// @return _disputed Whether a keeper or job has a pending dispute\\n  function disputes(address _keeperOrJob) external view returns (bool _disputed);\\n\\n  /// @notice Allows governance to create a dispute for a given keeper/job\\n  /// @param _jobOrKeeper The address in dispute\\n  function dispute(address _jobOrKeeper) external;\\n\\n  /// @notice Allows governance to resolve a dispute on a keeper/job\\n  /// @param _jobOrKeeper The address cleared\\n  function resolve(address _jobOrKeeper) external;\\n\\n  /// @notice Tracks how much a keeper has bonded of a certain token\\n  /// @return _bonds Amount of a certain token that a keeper has bonded\\n  function bonds(address _keeper, address _bond) external view returns (uint256 _bonds);\\n\\n  /// @notice The current token credits available for a job\\n  /// @return _amount The amount of token credits available for a job\\n  function jobTokenCredits(address _job, address _token) external view returns (uint256 _amount);\\n\\n  /// @notice Tracks the amount of assets deposited in pending bonds\\n  /// @return _pendingBonds Amount of a certain asset a keeper has unbonding\\n  function pendingBonds(address _keeper, address _bonding) external view returns (uint256 _pendingBonds);\\n\\n  /// @notice Tracks when a bonding for a keeper can be activated\\n  /// @return _timestamp Time at which the bonding for a keeper can be activated\\n  function canActivateAfter(address _keeper, address _bonding) external view returns (uint256 _timestamp);\\n\\n  /// @notice Tracks when keeper bonds are ready to be withdrawn\\n  /// @return _timestamp Time at which the keeper bonds are ready to be withdrawn\\n  function canWithdrawAfter(address _keeper, address _bonding) external view returns (uint256 _timestamp);\\n\\n  /// @notice Tracks how much keeper bonds are to be withdrawn\\n  /// @return _pendingUnbonds The amount of keeper bonds that are to be withdrawn\\n  function pendingUnbonds(address _keeper, address _bonding) external view returns (uint256 _pendingUnbonds);\\n\\n  /// @notice Checks whether the address has ever bonded an asset\\n  /// @return _hasBonded Whether the address has ever bonded an asset\\n  function hasBonded(address _keeper) external view returns (bool _hasBonded);\\n\\n  /// @notice Last block where tokens were added to the job [job => token => timestamp]\\n  /// @return _timestamp The last block where tokens were added to the job\\n  function jobTokenCreditsAddedAt(address _job, address _token) external view returns (uint256 _timestamp);\\n\\n  // Methods\\n\\n  /// @notice Add credit to a job to be paid out for work\\n  /// @param _job The address of the job being credited\\n  /// @param _token The address of the token being credited\\n  /// @param _amount The amount of credit being added\\n  function addTokenCreditsToJob(\\n    address _job,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  /// @notice Withdraw credit from a job\\n  /// @param _job The address of the job from which the credits are withdrawn\\n  /// @param _token The address of the token being withdrawn\\n  /// @param _amount The amount of token to be withdrawn\\n  /// @param _receiver The user that will receive tokens\\n  function withdrawTokenCreditsFromJob(\\n    address _job,\\n    address _token,\\n    uint256 _amount,\\n    address _receiver\\n  ) external;\\n\\n  /// @notice Lists liquidity pairs\\n  /// @return _list An array of addresses with all the approved liquidity pairs\\n  function approvedLiquidities() external view returns (address[] memory _list);\\n\\n  /// @notice Amount of liquidity in a specified job\\n  /// @param _job The address of the job being checked\\n  /// @param _liquidity The address of the liquidity we are checking\\n  /// @return _amount Amount of liquidity in the specified job\\n  function liquidityAmount(address _job, address _liquidity) external view returns (uint256 _amount);\\n\\n  /// @notice Last time the job was rewarded liquidity credits\\n  /// @param _job The address of the job being checked\\n  /// @return _timestamp Timestamp of the last time the job was rewarded liquidity credits\\n  function rewardedAt(address _job) external view returns (uint256 _timestamp);\\n\\n  /// @notice Last time the job was worked\\n  /// @param _job The address of the job being checked\\n  /// @return _timestamp Timestamp of the last time the job was worked\\n  function workedAt(address _job) external view returns (uint256 _timestamp);\\n\\n  /// @notice Maps the job to the owner of the job (job => user)\\n  /// @return _owner The addres of the owner of the job\\n  function jobOwner(address _job) external view returns (address _owner);\\n\\n  /// @notice Maps the owner of the job to its pending owner (job => user)\\n  /// @return _pendingOwner The address of the pending owner of the job\\n  function jobPendingOwner(address _job) external view returns (address _pendingOwner);\\n\\n  /// @notice Maps the jobs that have requested a migration to the address they have requested to migrate to\\n  /// @return _toJob The address to which the job has requested to migrate to\\n  function pendingJobMigrations(address _fromJob) external view returns (address _toJob);\\n\\n  // Methods\\n\\n  /// @notice Sets the Keep3rHelper address\\n  /// @param _keep3rHelper The Keep3rHelper address\\n  function setKeep3rHelper(address _keep3rHelper) external;\\n\\n  /// @notice Sets the Keep3rV1 address\\n  /// @param _keep3rV1 The Keep3rV1 address\\n  function setKeep3rV1(address _keep3rV1) external;\\n\\n  /// @notice Sets the Keep3rV1Proxy address\\n  /// @param _keep3rV1Proxy The Keep3rV1Proxy address\\n  function setKeep3rV1Proxy(address _keep3rV1Proxy) external;\\n\\n  /// @notice Sets the KP3R-WETH pool address\\n  /// @param _kp3rWethPool The KP3R-WETH pool address\\n  function setKp3rWethPool(address _kp3rWethPool) external;\\n\\n  /// @notice Sets the bond time required to activate as a keeper\\n  /// @param _bond The new bond time\\n  function setBondTime(uint256 _bond) external;\\n\\n  /// @notice Sets the unbond time required unbond what has been bonded\\n  /// @param _unbond The new unbond time\\n  function setUnbondTime(uint256 _unbond) external;\\n\\n  /// @notice Sets the minimum amount of liquidity required to fund a job\\n  /// @param _liquidityMinimum The new minimum amount of liquidity\\n  function setLiquidityMinimum(uint256 _liquidityMinimum) external;\\n\\n  /// @notice Sets the time required to pass between rewards for jobs\\n  /// @param _rewardPeriodTime The new amount of time required to pass between rewards\\n  function setRewardPeriodTime(uint256 _rewardPeriodTime) external;\\n\\n  /// @notice Sets the new inflation period\\n  /// @param _inflationPeriod The new inflation period\\n  function setInflationPeriod(uint256 _inflationPeriod) external;\\n\\n  /// @notice Sets the new fee\\n  /// @param _fee The new fee\\n  function setFee(uint256 _fee) external;\\n\\n  /// @notice Registers a slasher by updating the slashers mapping\\n  function addSlasher(address _slasher) external;\\n\\n  /// @notice Removes a slasher by updating the slashers mapping\\n  function removeSlasher(address _slasher) external;\\n\\n  /// @notice Registers a disputer by updating the disputers mapping\\n  function addDisputer(address _disputer) external;\\n\\n  /// @notice Removes a disputer by updating the disputers mapping\\n  function removeDisputer(address _disputer) external;\\n\\n  /// @notice Lists all jobs\\n  /// @return _jobList Array with all the jobs in _jobs\\n  function jobs() external view returns (address[] memory _jobList);\\n\\n  /// @notice Lists all keepers\\n  /// @return _keeperList Array with all the jobs in keepers\\n  function keepers() external view returns (address[] memory _keeperList);\\n\\n  /// @notice Beginning of the bonding process\\n  /// @param _bonding The asset being bound\\n  /// @param _amount The amount of bonding asset being bound\\n  function bond(address _bonding, uint256 _amount) external;\\n\\n  /// @notice Beginning of the unbonding process\\n  /// @param _bonding The asset being unbound\\n  /// @param _amount Allows for partial unbonding\\n  function unbond(address _bonding, uint256 _amount) external;\\n\\n  /// @notice End of the bonding process after bonding time has passed\\n  /// @param _bonding The asset being activated as bond collateral\\n  function activate(address _bonding) external;\\n\\n  /// @notice Withdraw funds after unbonding has finished\\n  /// @param _bonding The asset to withdraw from the bonding pool\\n  function withdraw(address _bonding) external;\\n\\n  /// @notice Allows governance to slash a keeper based on a dispute\\n  /// @param _keeper The address being slashed\\n  /// @param _bonded The asset being slashed\\n  /// @param _amount The amount being slashed\\n  function slash(\\n    address _keeper,\\n    address _bonded,\\n    uint256 _amount\\n  ) external;\\n\\n  /// @notice Blacklists a keeper from participating in the network\\n  /// @param _keeper The address being slashed\\n  function revoke(address _keeper) external;\\n\\n  /// @notice Allows any caller to add a new job\\n  /// @param _job Address of the contract for which work should be performed\\n  function addJob(address _job) external;\\n\\n  /// @notice Returns the liquidity credits of a given job\\n  /// @param _job The address of the job of which we want to know the liquidity credits\\n  /// @return _amount The liquidity credits of a given job\\n  function jobLiquidityCredits(address _job) external view returns (uint256 _amount);\\n\\n  /// @notice Returns the credits of a given job for the current period\\n  /// @param _job The address of the job of which we want to know the period credits\\n  /// @return _amount The credits the given job has at the current period\\n  function jobPeriodCredits(address _job) external view returns (uint256 _amount);\\n\\n  /// @notice Calculates the total credits of a given job\\n  /// @param _job The address of the job of which we want to know the total credits\\n  /// @return _amount The total credits of the given job\\n  function totalJobCredits(address _job) external view returns (uint256 _amount);\\n\\n  /// @notice Calculates how many credits should be rewarded periodically for a given liquidity amount\\n  /// @dev _periodCredits = underlying KP3Rs for given liquidity amount * rewardPeriod / inflationPeriod\\n  /// @param _liquidity The liquidity to provide\\n  /// @param _amount The amount of liquidity to provide\\n  /// @return _periodCredits The amount of KP3R periodically minted for the given liquidity\\n  function quoteLiquidity(address _liquidity, uint256 _amount) external view returns (uint256 _periodCredits);\\n\\n  /// @notice Observes the current state of the liquidity pair being observed and updates TickCache with the information\\n  /// @param _liquidity The liquidity pair being observed\\n  /// @return _tickCache The updated TickCache\\n  function observeLiquidity(address _liquidity) external view returns (TickCache memory _tickCache);\\n\\n  /// @notice Gifts liquidity credits to the specified job\\n  /// @param _job The address of the job being credited\\n  /// @param _amount The amount of liquidity credits to gift\\n  function forceLiquidityCreditsToJob(address _job, uint256 _amount) external;\\n\\n  /// @notice Approve a liquidity pair for being accepted in future\\n  /// @param _liquidity The address of the liquidity accepted\\n  function approveLiquidity(address _liquidity) external;\\n\\n  /// @notice Revoke a liquidity pair from being accepted in future\\n  /// @param _liquidity The liquidity no longer accepted\\n  function revokeLiquidity(address _liquidity) external;\\n\\n  /// @notice Allows anyone to fund a job with liquidity\\n  /// @param _job The address of the job to assign liquidity to\\n  /// @param _liquidity The liquidity being added\\n  /// @param _amount The amount of liquidity tokens to add\\n  function addLiquidityToJob(\\n    address _job,\\n    address _liquidity,\\n    uint256 _amount\\n  ) external;\\n\\n  /// @notice Unbond liquidity for a job\\n  /// @dev Can only be called by the job's owner\\n  /// @param _job The address of the job being unbound from\\n  /// @param _liquidity The liquidity being unbound\\n  /// @param _amount The amount of liquidity being removed\\n  function unbondLiquidityFromJob(\\n    address _job,\\n    address _liquidity,\\n    uint256 _amount\\n  ) external;\\n\\n  /// @notice Withdraw liquidity from a job\\n  /// @param _job The address of the job being withdrawn from\\n  /// @param _liquidity The liquidity being withdrawn\\n  /// @param _receiver The address that will receive the withdrawn liquidity\\n  function withdrawLiquidityFromJob(\\n    address _job,\\n    address _liquidity,\\n    address _receiver\\n  ) external;\\n\\n  /// @notice Confirms if the current keeper is registered, can be used for general (non critical) functions\\n  /// @param _keeper The keeper being investigated\\n  /// @return _isKeeper Whether the address passed as a parameter is a keeper or not\\n  function isKeeper(address _keeper) external returns (bool _isKeeper);\\n\\n  /// @notice Confirms if the current keeper is registered and has a minimum bond of any asset. Should be used for protected functions\\n  /// @param _keeper The keeper to check\\n  /// @param _bond The bond token being evaluated\\n  /// @param _minBond The minimum amount of bonded tokens\\n  /// @param _earned The minimum funds earned in the keepers lifetime\\n  /// @param _age The minimum keeper age required\\n  /// @return _isBondedKeeper Whether the `_keeper` meets the given requirements\\n  function isBondedKeeper(\\n    address _keeper,\\n    address _bond,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age\\n  ) external returns (bool _isBondedKeeper);\\n\\n  /// @notice Implemented by jobs to show that a keeper performed work\\n  /// @dev Automatically calculates the payment for the keeper\\n  /// @param _keeper Address of the keeper that performed the work\\n  function worked(address _keeper) external;\\n\\n  /// @notice Implemented by jobs to show that a keeper performed work\\n  /// @dev Pays the keeper that performs the work with KP3R\\n  /// @param _keeper Address of the keeper that performed the work\\n  /// @param _payment The reward that should be allocated for the job\\n  function bondedPayment(address _keeper, uint256 _payment) external;\\n\\n  /// @notice Implemented by jobs to show that a keeper performed work\\n  /// @dev Pays the keeper that performs the work with a specific token\\n  /// @param _token The asset being awarded to the keeper\\n  /// @param _keeper Address of the keeper that performed the work\\n  /// @param _amount The reward that should be allocated\\n  function directTokenPayment(\\n    address _token,\\n    address _keeper,\\n    uint256 _amount\\n  ) external;\\n\\n  /// @notice Proposes a new address to be the owner of the job\\n  function changeJobOwnership(address _job, address _newOwner) external;\\n\\n  /// @notice The proposed address accepts to be the owner of the job\\n  function acceptJobOwnership(address _job) external;\\n\\n  /// @notice Initializes the migration process for a job by adding the request to the pendingJobMigrations mapping\\n  /// @param _fromJob The address of the job that is requesting to migrate\\n  /// @param _toJob The address at which the job is requesting to migrate\\n  function migrateJob(address _fromJob, address _toJob) external;\\n\\n  /// @notice Completes the migration process for a job\\n  /// @dev Unbond/withdraw process doesn't get migrated\\n  /// @param _fromJob The address of the job that requested to migrate\\n  /// @param _toJob The address to which the job wants to migrate to\\n  function acceptJobMigration(address _fromJob, address _toJob) external;\\n\\n  /// @notice Allows governance or slasher to slash a job specific token\\n  /// @param _job The address of the job from which the token will be slashed\\n  /// @param _token The address of the token that will be slashed\\n  /// @param _amount The amount of the token that will be slashed\\n  function slashTokenFromJob(\\n    address _job,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  /// @notice Allows governance or a slasher to slash liquidity from a job\\n  /// @param _job The address being slashed\\n  /// @param _liquidity The address of the liquidity that will be slashed\\n  /// @param _amount The amount of liquidity that will be slashed\\n  function slashLiquidityFromJob(\\n    address _job,\\n    address _liquidity,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x36bd93f352336f290595a026a2142a40a6ac274b4f49c00816585a63a0beb8ee\",\"license\":\"MIT\"},\"solidity/interfaces/utils/IBaseErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IBaseErrors {\\n  /// @notice Throws if a variable is assigned to the zero address\\n  error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x9130019a08d9eaedfb920a323fed5c7f409736cd918f1a32921c93551b3ee00e\",\"license\":\"MIT\"},\"solidity/interfaces/utils/IDustCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './IGovernable.sol';\\n\\ninterface IDustCollector is IGovernable {\\n  /// @notice Emitted when dust is sent\\n  /// @param _to The address which wil received the funds\\n  /// @param _token The token that will be transferred\\n  /// @param _amount The amount of the token that will be transferred\\n  event DustSent(address _token, uint256 _amount, address _to);\\n\\n  /// @notice Allows an authorized user to transfer the tokens or eth that may have been left in a contract\\n  /// @param _token The token that will be transferred\\n  /// @param _amount The amont of the token that will be transferred\\n  /// @param _to The address that will receive the idle funds\\n  function sendDust(\\n    address _token,\\n    uint256 _amount,\\n    address _to\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb491e9025876188447423e13db918afe57e6cb62650ce703389aac02e1648518\",\"license\":\"MIT\"},\"solidity/interfaces/utils/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './IBaseErrors.sol';\\n\\ninterface IGovernable is IBaseErrors {\\n  // events\\n  /// @notice Emitted when a new governance is proposed\\n  event PendingGovernorSet(address _governor, address _pendingGovernor);\\n  /// @notice Emitted when pendingGovernance accepts to be governance\\n  event PendingGovernorAccepted(address _newGovernor);\\n\\n  // errors\\n  /// @notice Throws if the caller of the function is not Governance\\n  error OnlyGovernor();\\n  /// @notice Throws if the caller of the function is not pendingGovernance\\n  error OnlyPendingGovernor();\\n\\n  // variables\\n  /// @notice Stores the governance address\\n  /// @return _governor The governance addresss\\n  function governor() external view returns (address _governor);\\n\\n  /// @notice Stores the pendingGovernance address\\n  /// @return _pendingGovernor The pendingGovernance addresss\\n  function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n  // methods\\n  /// @notice Proposes a new address to be governance\\n  /// @param _pendingGovernor The address being proposed as the new governance\\n  function setPendingGovernor(address _pendingGovernor) external;\\n\\n  /// @notice Changes the governance from the current governance to the previously proposed address\\n  function acceptPendingGovernor() external;\\n}\\n\",\"keccak256\":\"0xc88a32ae379afc85b4c7aa88edee4c82418bfbc12f86912faf62b585c23f2aad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405268d8d726b7177a80000060005569043c33c1937564800000600155600580546001600160a01b031990811673eb02addcfd8b773a5ffa6b9d1fe99c566f8c44cc1790915560068054909116735d469e1ef75507b0e0439667ae45e280b9d81b9c1790553480156200007457600080fd5b506040516200192738038062001927833981016040819052620000979162000200565b807f575b1e14d0e4daeb6a32c66b32cfdea5b2c73f8aa141c107d87c903e58106e10600054600154604051620000d7929190918252602082015260400190565b60405180910390a16001600160a01b038116620001075760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b03928316179055600554600654604080519284168352921660208201527ff5e10d0ae40ac48b447a4151e58370c547304f802ae1b11dea98176396cfc287910160405180910390a160405163095ea7b360e01b8152739759a6ac90977b93b58547b4a71c78317f391a2860048201526000196024820152736b175474e89094c44da98b954eedeac495271d0f9063095ea7b3906044016020604051808303816000875af1158015620001d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f8919062000232565b505062000256565b6000602082840312156200021357600080fd5b81516001600160a01b03811681146200022b57600080fd5b9392505050565b6000602082840312156200024557600080fd5b815180151581146200022b57600080fd5b6116c180620002666000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063869630d611610104578063b43c661f116100a2578063e3056a3411610071578063e3056a34146103cc578063e515717d146103df578063edaafe20146103ff578063f235757f1461041a57600080fd5b8063b43c661f1461037a578063c07514f414610395578063c4dd1dd61461039e578063e0bab4c4146103b157600080fd5b80639c836409116100de5780639c8364091461031e578063a734f06e14610331578063aced16611461034c578063b15a80961461035f57600080fd5b8063869630d6146102dd578063966abd00146102f85780639b63d4831461030b57600080fd5b8063307fba0e1161017c578063634c7bb51161014b578063634c7bb51461029b578063748747e6146102ae57806375c46370146102c157806380c8610f146102ca57600080fd5b8063307fba0e1461026e5780633a56573b1461027657806358e7ec3c1461027f5780635923bfc51461029257600080fd5b806311e5ff3f116101b857806311e5ff3f1461023457806313f6986d1461024b57806322c0ffc61461025357806326540fd21461026657600080fd5b806302fc0139146101df578063064cc89a146102175780630c340a2414610221575b600080fd5b6101fa739759a6ac90977b93b58547b4a71c78317f391a2881565b6040516001600160a01b0390911681526020015b60405180910390f35b61021f61042d565b005b6003546101fa906001600160a01b031681565b61023d60005481565b60405190815260200161020e565b61021f610462565b61021f6102613660046112a2565b6104eb565b61023d610567565b61021f6105fb565b61023d60025481565b6006546101fa906001600160a01b031681565b61023d60015481565b6005546101fa906001600160a01b031681565b61021f6102bc3660046112dc565b610626565b61023d60095481565b61021f6102d83660046112f9565b6106a6565b6101fa73a4c22f0e25c6630b2017979acf1f865e94695c4b81565b61021f610306366004611312565b610756565b61021f610319366004611354565b61086c565b61021f61032c3660046113a3565b6108fe565b6101fa73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6007546101fa906001600160a01b031681565b6101fa73be8e3e3618f7474f8cb1d074a26affef007e98fb81565b6101fa73a950524441892a31ebddf91d3ceefa04bf45446681565b61023d60085481565b61021f6103ac3660046112f9565b6109b1565b6101fa736b175474e89094c44da98b954eedeac495271d0f81565b6004546101fa906001600160a01b031681565b61023d6103ed3660046112f9565b600a6020526000908152604090205481565b6000546001546040805192835260208301919091520161020e565b61021f6104283660046112dc565b610b10565b6003546001600160a01b031633146104585760405163070545c960e51b815260040160405180910390fd5b610460610bbe565b565b6004546001600160a01b0316331461048d57604051639ba0305d60e01b815260040160405180910390fd5b60048054600380546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527f5d5d6e01b731c3e68060f7fe13156f6197d4aeffc2d6f498e34c717ae616b7349060200160405180910390a1565b3373be8e3e3618f7474f8cb1d074a26affef007e98fb1461051f57604051630d32e1b960e11b815260040160405180910390fd5b6000829055600181905560408051838152602081018390527f575b1e14d0e4daeb6a32c66b32cfdea5b2c73f8aa141c107d87c903e58106e1091015b60405180910390a15050565b60055460065460405163168f92e760e01b81526001600160a01b039182166004820152736b175474e89094c44da98b954eedeac495271d0f6024820152600092919091169063168f92e790604401602060405180830381865afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f69190611467565b905090565b6007546001600160a01b031633146104585760405163c60eb33560e01b815260040160405180910390fd5b6003546001600160a01b031633146106515760405163070545c960e51b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527fdc3dba1d64dd67c0dc8b12621edd0c6ca4303a9073c3a8fcac38115e73d67b6b906020015b60405180910390a150565b6003546001600160a01b031633146106d15760405163070545c960e51b815260040160405180910390fd5b6000818152600a602052604090205460085481111561070357604051635b211b2f60e11b815260040160405180910390fd5b80600860008282546107159190611496565b90915550506000828152600a60205260408082208290555183917f85372a39829651e8322c98e0bf789d35281a87881f3d2978f0bbc15613366fbd91a25050565b6003546001600160a01b031633146107815760405163070545c960e51b815260040160405180910390fd5b6001600160a01b0381166107a85760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610809576040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015610803573d6000803e3d6000fd5b5061081d565b61081d6001600160a01b0384168284610fdb565b604080516001600160a01b0385811682526020820185905283168183015290517f9a3055ded8c8b5f21bbf4946c5afab6e1fa8b3f057922658e5e1ade125fb0b1e9181900360600190a1505050565b6003546001600160a01b031633146108975760405163070545c960e51b815260040160405180910390fd5b600580546001600160a01b038481166001600160a01b03199283168117909355600680549185169190921681179091556040805192835260208301919091527ff5e10d0ae40ac48b447a4151e58370c547304f802ae1b11dea98176396cfc287910161055b565b6003546001600160a01b031633146109295760405163070545c960e51b815260040160405180910390fd5b816008600082825461093b91906114ad565b9250508190555081600a6000600960008154610956906114c5565b9190508190558152602001908152602001600020819055506009547f21283ff2e4dab34d074618191a7f774327a78694039444886e80f861a2c1d87b8484846040516109a49392919061153c565b60405180910390a2505050565b6003546001600160a01b031633146109dc5760405163070545c960e51b815260040160405180910390fd5b600080600080600073a4c22f0e25c6630b2017979acf1f865e94695c4b6001600160a01b031663fc5a5b63876040518263ffffffff1660e01b8152600401610a2691815260200190565b61010060405180830381865afa158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a689190611596565b50965050509450945094509450306001600160a01b0316856001600160a01b031614610aa7576040516302ec9f7360e01b815260040160405180910390fd5b60028690556040805165ffffffffffff868116825285811660208301528416818301526001600160801b0383166060820152905187917fd945d1520b10db851648ecbcf2b7aeaaf75d05c01a1b47122a446b527e631df8919081900360800190a2505050505050565b6003546001600160a01b03163314610b3b5760405163070545c960e51b815260040160405180910390fd5b6001600160a01b038116610b625760405163d92e233d60e01b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b038381169182179092556003546040805191909316815260208101919091527f6353ec38ac394f8be94bfafcdd3580d356470599059eaeebedc3207e1cc03dec910161069b565b6040516370a0823160e01b8152306004820152600090736b175474e89094c44da98b954eedeac495271d0f906370a0823190602401602060405180830381865afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190611467565b60025460405162d4ec1760e71b815291925073a4c22f0e25c6630b2017979acf1f865e94695c4b91636a760b8091610c729160040190815260200190565b600060405180830381600087803b158015610c8c57600080fd5b505af1158015610ca0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152839250736b175474e89094c44da98b954eedeac495271d0f91506370a0823190602401602060405180830381865afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d199190611467565b610d239190611496565b9050600054811015610d4857604051631dd7e30760e11b815260040160405180910390fd5b6000600154821115610d6957600154610d619083611496565b905060015491505b600080546008541115610da957610d8260085484611032565b90508060086000828254610d969190611496565b90915550610da690508184611496565b92505b6000610db3610567565b90506000805482108015610dc75750600085115b15610f0157610de382600154610ddd9190611496565b86611032565b60055460405163095ea7b360e01b81526001600160a01b03909116600482015260248101829052909150736b175474e89094c44da98b954eedeac495271d0f9063095ea7b3906044016020604051808303816000875af1158015610e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6f919061163a565b5060055460065460405163575288bf60e01b81526001600160a01b039182166004820152736b175474e89094c44da98b954eedeac495271d0f60248201526044810184905291169063575288bf90606401600060405180830381600087803b158015610eda57600080fd5b505af1158015610eee573d6000803e3d6000fd5b505050508085610efe9190611496565b94505b610f0b85856114ad565b93508315610f9357604051633b4da69f60e01b815273a950524441892a31ebddf91d3ceefa04bf454466600482015260248101859052739759a6ac90977b93b58547b4a71c78317f391a2890633b4da69f90604401600060405180830381600087803b158015610f7a57600080fd5b505af1158015610f8e573d6000803e3d6000fd5b505050505b60408051848152602081018390529081018590527faef6f8423af19ac5fb3dd3bab7050b024cae4e58f317fb95ac919111e195cee89060600160405180910390a15050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261102d90849061104a565b505050565b60008183106110415781611043565b825b9392505050565b600061109f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111219092919063ffffffff16565b80519091501561102d57808060200190518101906110bd919061163a565b61102d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60606111308484600085611138565b949350505050565b6060824710156111995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611118565b6001600160a01b0385163b6111f05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611118565b600080866001600160a01b0316858760405161120c919061165c565b60006040518083038185875af1925050503d8060008114611249576040519150601f19603f3d011682016040523d82523d6000602084013e61124e565b606091505b509150915061125e828286611269565b979650505050505050565b60608315611278575081611043565b8251156112885782518084602001fd5b8160405162461bcd60e51b81526004016111189190611678565b600080604083850312156112b557600080fd5b50508035926020909101359150565b6001600160a01b03811681146112d957600080fd5b50565b6000602082840312156112ee57600080fd5b8135611043816112c4565b60006020828403121561130b57600080fd5b5035919050565b60008060006060848603121561132757600080fd5b8335611332816112c4565b9250602084013591506040840135611349816112c4565b809150509250925092565b6000806040838503121561136757600080fd5b8235611372816112c4565b91506020830135611382816112c4565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156113b857600080fd5b8335925060208401359150604084013567ffffffffffffffff808211156113de57600080fd5b818601915086601f8301126113f257600080fd5b8135818111156114045761140461138d565b604051601f8201601f19908116603f0116810190838211818310171561142c5761142c61138d565b8160405282815289602084870101111561144557600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561147957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156114a8576114a8611480565b500390565b600082198211156114c0576114c0611480565b500190565b60006000198214156114d9576114d9611480565b5060010190565b60005b838110156114fb5781810151838201526020016114e3565b8381111561150a576000848401525b50505050565b600081518084526115288160208601602086016114e0565b601f01601f19169290920160200192915050565b83815282602082015260606040820152600061155b6060830184611510565b95945050505050565b805165ffffffffffff8116811461157a57600080fd5b919050565b80516001600160801b038116811461157a57600080fd5b600080600080600080600080610100898b0312156115b357600080fd5b88516115be816112c4565b97506115cc60208a01611564565b96506115da60408a01611564565b95506115e860608a01611564565b945060808901516115f8816112c4565b60a08a015190945060ff8116811461160f57600080fd5b925061161d60c08a0161157f565b915061162b60e08a0161157f565b90509295985092959890939650565b60006020828403121561164c57600080fd5b8151801515811461104357600080fd5b6000825161166e8184602087016114e0565b9190910192915050565b602081526000611043602083018461151056fea26469706673582212206955683df54b6be71bcfa54d787f0998993229f72d536bb2313374007bd9996a64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063869630d611610104578063b43c661f116100a2578063e3056a3411610071578063e3056a34146103cc578063e515717d146103df578063edaafe20146103ff578063f235757f1461041a57600080fd5b8063b43c661f1461037a578063c07514f414610395578063c4dd1dd61461039e578063e0bab4c4146103b157600080fd5b80639c836409116100de5780639c8364091461031e578063a734f06e14610331578063aced16611461034c578063b15a80961461035f57600080fd5b8063869630d6146102dd578063966abd00146102f85780639b63d4831461030b57600080fd5b8063307fba0e1161017c578063634c7bb51161014b578063634c7bb51461029b578063748747e6146102ae57806375c46370146102c157806380c8610f146102ca57600080fd5b8063307fba0e1461026e5780633a56573b1461027657806358e7ec3c1461027f5780635923bfc51461029257600080fd5b806311e5ff3f116101b857806311e5ff3f1461023457806313f6986d1461024b57806322c0ffc61461025357806326540fd21461026657600080fd5b806302fc0139146101df578063064cc89a146102175780630c340a2414610221575b600080fd5b6101fa739759a6ac90977b93b58547b4a71c78317f391a2881565b6040516001600160a01b0390911681526020015b60405180910390f35b61021f61042d565b005b6003546101fa906001600160a01b031681565b61023d60005481565b60405190815260200161020e565b61021f610462565b61021f6102613660046112a2565b6104eb565b61023d610567565b61021f6105fb565b61023d60025481565b6006546101fa906001600160a01b031681565b61023d60015481565b6005546101fa906001600160a01b031681565b61021f6102bc3660046112dc565b610626565b61023d60095481565b61021f6102d83660046112f9565b6106a6565b6101fa73a4c22f0e25c6630b2017979acf1f865e94695c4b81565b61021f610306366004611312565b610756565b61021f610319366004611354565b61086c565b61021f61032c3660046113a3565b6108fe565b6101fa73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6007546101fa906001600160a01b031681565b6101fa73be8e3e3618f7474f8cb1d074a26affef007e98fb81565b6101fa73a950524441892a31ebddf91d3ceefa04bf45446681565b61023d60085481565b61021f6103ac3660046112f9565b6109b1565b6101fa736b175474e89094c44da98b954eedeac495271d0f81565b6004546101fa906001600160a01b031681565b61023d6103ed3660046112f9565b600a6020526000908152604090205481565b6000546001546040805192835260208301919091520161020e565b61021f6104283660046112dc565b610b10565b6003546001600160a01b031633146104585760405163070545c960e51b815260040160405180910390fd5b610460610bbe565b565b6004546001600160a01b0316331461048d57604051639ba0305d60e01b815260040160405180910390fd5b60048054600380546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527f5d5d6e01b731c3e68060f7fe13156f6197d4aeffc2d6f498e34c717ae616b7349060200160405180910390a1565b3373be8e3e3618f7474f8cb1d074a26affef007e98fb1461051f57604051630d32e1b960e11b815260040160405180910390fd5b6000829055600181905560408051838152602081018390527f575b1e14d0e4daeb6a32c66b32cfdea5b2c73f8aa141c107d87c903e58106e1091015b60405180910390a15050565b60055460065460405163168f92e760e01b81526001600160a01b039182166004820152736b175474e89094c44da98b954eedeac495271d0f6024820152600092919091169063168f92e790604401602060405180830381865afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f69190611467565b905090565b6007546001600160a01b031633146104585760405163c60eb33560e01b815260040160405180910390fd5b6003546001600160a01b031633146106515760405163070545c960e51b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527fdc3dba1d64dd67c0dc8b12621edd0c6ca4303a9073c3a8fcac38115e73d67b6b906020015b60405180910390a150565b6003546001600160a01b031633146106d15760405163070545c960e51b815260040160405180910390fd5b6000818152600a602052604090205460085481111561070357604051635b211b2f60e11b815260040160405180910390fd5b80600860008282546107159190611496565b90915550506000828152600a60205260408082208290555183917f85372a39829651e8322c98e0bf789d35281a87881f3d2978f0bbc15613366fbd91a25050565b6003546001600160a01b031633146107815760405163070545c960e51b815260040160405180910390fd5b6001600160a01b0381166107a85760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610809576040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015610803573d6000803e3d6000fd5b5061081d565b61081d6001600160a01b0384168284610fdb565b604080516001600160a01b0385811682526020820185905283168183015290517f9a3055ded8c8b5f21bbf4946c5afab6e1fa8b3f057922658e5e1ade125fb0b1e9181900360600190a1505050565b6003546001600160a01b031633146108975760405163070545c960e51b815260040160405180910390fd5b600580546001600160a01b038481166001600160a01b03199283168117909355600680549185169190921681179091556040805192835260208301919091527ff5e10d0ae40ac48b447a4151e58370c547304f802ae1b11dea98176396cfc287910161055b565b6003546001600160a01b031633146109295760405163070545c960e51b815260040160405180910390fd5b816008600082825461093b91906114ad565b9250508190555081600a6000600960008154610956906114c5565b9190508190558152602001908152602001600020819055506009547f21283ff2e4dab34d074618191a7f774327a78694039444886e80f861a2c1d87b8484846040516109a49392919061153c565b60405180910390a2505050565b6003546001600160a01b031633146109dc5760405163070545c960e51b815260040160405180910390fd5b600080600080600073a4c22f0e25c6630b2017979acf1f865e94695c4b6001600160a01b031663fc5a5b63876040518263ffffffff1660e01b8152600401610a2691815260200190565b61010060405180830381865afa158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a689190611596565b50965050509450945094509450306001600160a01b0316856001600160a01b031614610aa7576040516302ec9f7360e01b815260040160405180910390fd5b60028690556040805165ffffffffffff868116825285811660208301528416818301526001600160801b0383166060820152905187917fd945d1520b10db851648ecbcf2b7aeaaf75d05c01a1b47122a446b527e631df8919081900360800190a2505050505050565b6003546001600160a01b03163314610b3b5760405163070545c960e51b815260040160405180910390fd5b6001600160a01b038116610b625760405163d92e233d60e01b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b038381169182179092556003546040805191909316815260208101919091527f6353ec38ac394f8be94bfafcdd3580d356470599059eaeebedc3207e1cc03dec910161069b565b6040516370a0823160e01b8152306004820152600090736b175474e89094c44da98b954eedeac495271d0f906370a0823190602401602060405180830381865afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190611467565b60025460405162d4ec1760e71b815291925073a4c22f0e25c6630b2017979acf1f865e94695c4b91636a760b8091610c729160040190815260200190565b600060405180830381600087803b158015610c8c57600080fd5b505af1158015610ca0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152839250736b175474e89094c44da98b954eedeac495271d0f91506370a0823190602401602060405180830381865afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d199190611467565b610d239190611496565b9050600054811015610d4857604051631dd7e30760e11b815260040160405180910390fd5b6000600154821115610d6957600154610d619083611496565b905060015491505b600080546008541115610da957610d8260085484611032565b90508060086000828254610d969190611496565b90915550610da690508184611496565b92505b6000610db3610567565b90506000805482108015610dc75750600085115b15610f0157610de382600154610ddd9190611496565b86611032565b60055460405163095ea7b360e01b81526001600160a01b03909116600482015260248101829052909150736b175474e89094c44da98b954eedeac495271d0f9063095ea7b3906044016020604051808303816000875af1158015610e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6f919061163a565b5060055460065460405163575288bf60e01b81526001600160a01b039182166004820152736b175474e89094c44da98b954eedeac495271d0f60248201526044810184905291169063575288bf90606401600060405180830381600087803b158015610eda57600080fd5b505af1158015610eee573d6000803e3d6000fd5b505050508085610efe9190611496565b94505b610f0b85856114ad565b93508315610f9357604051633b4da69f60e01b815273a950524441892a31ebddf91d3ceefa04bf454466600482015260248101859052739759a6ac90977b93b58547b4a71c78317f391a2890633b4da69f90604401600060405180830381600087803b158015610f7a57600080fd5b505af1158015610f8e573d6000803e3d6000fd5b505050505b60408051848152602081018390529081018590527faef6f8423af19ac5fb3dd3bab7050b024cae4e58f317fb95ac919111e195cee89060600160405180910390a15050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261102d90849061104a565b505050565b60008183106110415781611043565b825b9392505050565b600061109f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111219092919063ffffffff16565b80519091501561102d57808060200190518101906110bd919061163a565b61102d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60606111308484600085611138565b949350505050565b6060824710156111995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611118565b6001600160a01b0385163b6111f05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611118565b600080866001600160a01b0316858760405161120c919061165c565b60006040518083038185875af1925050503d8060008114611249576040519150601f19603f3d011682016040523d82523d6000602084013e61124e565b606091505b509150915061125e828286611269565b979650505050505050565b60608315611278575081611043565b8251156112885782518084602001fd5b8160405162461bcd60e51b81526004016111189190611678565b600080604083850312156112b557600080fd5b50508035926020909101359150565b6001600160a01b03811681146112d957600080fd5b50565b6000602082840312156112ee57600080fd5b8135611043816112c4565b60006020828403121561130b57600080fd5b5035919050565b60008060006060848603121561132757600080fd5b8335611332816112c4565b9250602084013591506040840135611349816112c4565b809150509250925092565b6000806040838503121561136757600080fd5b8235611372816112c4565b91506020830135611382816112c4565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156113b857600080fd5b8335925060208401359150604084013567ffffffffffffffff808211156113de57600080fd5b818601915086601f8301126113f257600080fd5b8135818111156114045761140461138d565b604051601f8201601f19908116603f0116810190838211818310171561142c5761142c61138d565b8160405282815289602084870101111561144557600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561147957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156114a8576114a8611480565b500390565b600082198211156114c0576114c0611480565b500190565b60006000198214156114d9576114d9611480565b5060010190565b60005b838110156114fb5781810151838201526020016114e3565b8381111561150a576000848401525b50505050565b600081518084526115288160208601602086016114e0565b601f01601f19169290920160200192915050565b83815282602082015260606040820152600061155b6060830184611510565b95945050505050565b805165ffffffffffff8116811461157a57600080fd5b919050565b80516001600160801b038116811461157a57600080fd5b600080600080600080600080610100898b0312156115b357600080fd5b88516115be816112c4565b97506115cc60208a01611564565b96506115da60408a01611564565b95506115e860608a01611564565b945060808901516115f8816112c4565b60a08a015190945060ff8116811461160f57600080fd5b925061161d60c08a0161157f565b915061162b60e08a0161157f565b90509295985092959890939650565b60006020828403121561164c57600080fd5b8151801515811461104357600080fd5b6000825161166e8184602087016114e0565b9190910192915050565b602081526000611043602083018461151056fea26469706673582212206955683df54b6be71bcfa54d787f0998993229f72d536bb2313374007bd9996a64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "credits()": {
        "returns": {
          "_daiCredits": "The amount of DAI credits on the Keep3r Job"
        }
      },
      "deleteInvoice(uint256)": {
        "params": {
          "_invoiceNonce": "The number ID of the deleted invoice"
        }
      },
      "invoiceGas(uint256,uint256,string)": {
        "params": {
          "_claimableDai": "The equivalent amount of DAI to be charged for the gas amount",
          "_description": "A text description to explain the nature of the invoice",
          "_gasCostETH": "The amount of gas invoiced in ETH"
        }
      },
      "sendDust(address,uint256,address)": {
        "params": {
          "_amount": "The amont of the token that will be transferred",
          "_to": "The address that will receive the idle funds",
          "_token": "The token that will be transferred"
        }
      },
      "setKeep3rJob(address,address)": {
        "params": {
          "_job": "The address of the Job contract",
          "_keep3r": "The address of Keep3r where the job is registered"
        }
      },
      "setKeeper(address)": {
        "params": {
          "_keeper": "The address allowed to upkeep the claim function"
        }
      },
      "setPendingGovernor(address)": {
        "params": {
          "_pendingGovernor": "The address being proposed as the new governance"
        }
      },
      "setVestId(uint256)": {
        "params": {
          "_vestId": "The numeric ID of the vest"
        }
      }
    },
    "stateVariables": {
      "daiToClaim": {
        "return": "_dai The amount of DAI currently in debt to the contract",
        "returns": {
          "_0": "_dai The amount of DAI currently in debt to the contract"
        }
      },
      "invoiceAmount": {
        "params": {
          "_invoiceNonce": "The invoice ID"
        },
        "return": "_invoiceDai The amount of invoiced DAI",
        "returns": {
          "_0": "_invoiceDai The amount of invoiced DAI"
        }
      },
      "job": {
        "return": "_job The address of the Job contract",
        "returns": {
          "_0": "_job The address of the Job contract"
        }
      },
      "keep3r": {
        "return": "_keep3r The address of Keep3r where the job is registered",
        "returns": {
          "_0": "_keep3r The address of Keep3r where the job is registered"
        }
      },
      "keeper": {
        "return": "_keeper The address allowed to upkeep the claim function",
        "returns": {
          "_0": "_keeper The address allowed to upkeep the claim function"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "IncorrectVestId()": [
        {
          "notice": "Throws when the provided vest ID doesn't have contract as beneficiary"
        }
      ],
      "InvoiceClaimed()": [
        {
          "notice": "Throws when the invoice to be deleted has already been claimed"
        }
      ],
      "MinBuffer()": [
        {
          "notice": "Throws when the vested DAI is less than MinBuffer"
        }
      ],
      "OnlyGovernor()": [
        {
          "notice": "Throws if the caller of the function is not Governance"
        }
      ],
      "OnlyKeeper()": [
        {
          "notice": "Throws when an unallowed address tries to trigger upkeep"
        }
      ],
      "OnlyMaker()": [
        {
          "notice": "Throws when an unallowed address tries to trigger Maker methods"
        }
      ],
      "OnlyPendingGovernor()": [
        {
          "notice": "Throws if the caller of the function is not pendingGovernance"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Throws if a variable is assigned to the zero address"
        }
      ]
    },
    "events": {
      "BufferSet(uint256,uint256)": {
        "notice": "Emitted when Maker sets new buffer thresholds"
      },
      "ClaimedDai(uint256,uint256,uint256)": {
        "notice": "Emitted when the DAI vest mechanism is executed"
      },
      "DeletedInvoice(uint256)": {
        "notice": "Emitted when Governor removes an incorrect invoice"
      },
      "DustSent(address,uint256,address)": {
        "notice": "Emitted when dust is sent"
      },
      "InvoicedGas(uint256,uint256,uint256,string)": {
        "notice": "Emitted when Governor adds an invoice to be charged"
      },
      "Keep3rJobSet(address,address)": {
        "notice": "Emitted when Governor changes the Keep3r and Job addresses"
      },
      "KeeperSet(address)": {
        "notice": "Emitted when Governor changes the Keeper address"
      },
      "PendingGovernorAccepted(address)": {
        "notice": "Emitted when pendingGovernance accepts to be governance"
      },
      "PendingGovernorSet(address,address)": {
        "notice": "Emitted when a new governance is proposed"
      },
      "VestSet(uint256,uint48,uint48,uint48,uint128)": {
        "notice": "Emitted when Maker sets a new vest"
      }
    },
    "kind": "user",
    "methods": {
      "DAI()": {
        "notice": "The address of DAI"
      },
      "DAI_JOIN()": {
        "notice": "The address of DAI JOIN"
      },
      "DSS_VEST()": {
        "notice": "The address of DSS VEST"
      },
      "MAKER_DAO()": {
        "notice": "The address of MAKER DAO"
      },
      "VOW()": {
        "notice": "The address of VOW"
      },
      "acceptPendingGovernor()": {
        "notice": "Changes the governance from the current governance to the previously proposed address"
      },
      "buffer()": {
        "notice": "Returns the buffer thresholds"
      },
      "claimDai()": {
        "notice": "Allows Governor to trigger DAI vest"
      },
      "claimDaiUpkeep()": {
        "notice": "Allows Keeper to trigger DAI vest"
      },
      "credits()": {
        "notice": "Amount of credits available"
      },
      "daiToClaim()": {
        "notice": "Sum of invoiced DAI amount minus already claimed DAI"
      },
      "deleteInvoice(uint256)": {
        "notice": "Allows Governor to remove an unclaimed invoice"
      },
      "governor()": {
        "notice": "Stores the governance address"
      },
      "invoiceAmount(uint256)": {
        "notice": "Maps the invoice ID to the invoiced DAI amount"
      },
      "invoiceGas(uint256,uint256,string)": {
        "notice": "Allows Governor to add invoices"
      },
      "invoiceNonce()": {
        "notice": "Current invoice nonce"
      },
      "maxBuffer()": {
        "notice": "The maximum amount of DAI to be vested at a time"
      },
      "minBuffer()": {
        "notice": "The minimum amount of DAI to be vested"
      },
      "pendingGovernor()": {
        "notice": "Stores the pendingGovernance address"
      },
      "sendDust(address,uint256,address)": {
        "notice": "Allows an authorized user to transfer the tokens or eth that may have been left in a contract"
      },
      "setBuffer(uint256,uint256)": {
        "notice": "Allows Maker to set the buffer thresholds"
      },
      "setKeep3rJob(address,address)": {
        "notice": "Allows Governor to set new Keep3rJob"
      },
      "setKeeper(address)": {
        "notice": "Allows Governor to set new Keeeper"
      },
      "setPendingGovernor(address)": {
        "notice": "Proposes a new address to be governance"
      },
      "setVestId(uint256)": {
        "notice": "Allows Governor to set the vest ID"
      },
      "vestId()": {
        "notice": "The Vest ID"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1152,
        "contract": "solidity/contracts/MakerDAOBudgetManager.sol:MakerDAOBudgetManager",
        "label": "minBuffer",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1156,
        "contract": "solidity/contracts/MakerDAOBudgetManager.sol:MakerDAOBudgetManager",
        "label": "maxBuffer",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1159,
        "contract": "solidity/contracts/MakerDAOBudgetManager.sol:MakerDAOBudgetManager",
        "label": "vestId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1409,
        "contract": "solidity/contracts/MakerDAOBudgetManager.sol:MakerDAOBudgetManager",
        "label": "governor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1412,
        "contract": "solidity/contracts/MakerDAOBudgetManager.sol:MakerDAOBudgetManager",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 704,
        "contract": "solidity/contracts/MakerDAOBudgetManager.sol:MakerDAOBudgetManager",
        "label": "keep3r",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 708,
        "contract": "solidity/contracts/MakerDAOBudgetManager.sol:MakerDAOBudgetManager",
        "label": "job",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 711,
        "contract": "solidity/contracts/MakerDAOBudgetManager.sol:MakerDAOBudgetManager",
        "label": "keeper",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 714,
        "contract": "solidity/contracts/MakerDAOBudgetManager.sol:MakerDAOBudgetManager",
        "label": "daiToClaim",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 717,
        "contract": "solidity/contracts/MakerDAOBudgetManager.sol:MakerDAOBudgetManager",
        "label": "invoiceNonce",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 722,
        "contract": "solidity/contracts/MakerDAOBudgetManager.sol:MakerDAOBudgetManager",
        "label": "invoiceAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}